package jsymbolic2.ngrams;

import java.util.HashMap;
import java.util.LinkedList;

/**
 * IMPORTANT NOTE: This class is currently not used by any active jSymbolic code, and is intended for future
 * use only. This class is, however used by several (currently commented out) methods at the end of the
 * otherwise active NGramGenerator class, and these methods can be used in the future once two-dimensional
 * n-gram features are implemented. The contents of this class have not undergone code or documentation review
 * yet, nor has this class been rigorously tested, so care should be taken when using it in the future.
 * Ultimately, this class will be useful in the future once features are implemented for using aggregated
 * two-dimensional n-grams. This class makes it possible to store aggregates of two-dimensional n-grams made
 * by combining (for example) any two of melodic, rhythmic and vertical n-grams. For example, vertical
 * interval and melodic interval n-grams can be combined to permit contrapuntal n-grams, similar to those
 * proposed in the jSymbolic manual. Similarly, melodic interval and rhythmic value n-grams could be combined
 * to produce n-grams facilitating isorhythmic analysis.
 *
 * 
 * 
 * 
  * This object aggregates two-dimensional n-grams generated by the NGramGenerator object and returns useful 
 * information for use by feature calculators. Each instance of this object is instantiated with a list of 
 * two-dimensional n-grams. 
 * 
 * This object inherits the fields linking unique identifiers and their respective frequencies, though it 
 * should be noted that the function of these fields is different when aggregating two-dimensional n-grams 
 * because two-dimensional n-grams have a secondary identifier, and consequently a joint identifier composed 
 * of the n-gram's (primary) identifier and its secondary identifier. For example, this object's 
 * n_gram_by_unique_id_to_frequency_map field does not map all n-grams in the list of n-grams passed to this 
 * object, but only the n-grams with unique primary identifiers (two two-dimensional n-grams may share the 
 * same secondary identifier). To facilitate analysis of the n-grams by secondary or joint identifier only, 
 * this object creates the same structures (a hash map and two corresponding arrays) for them at 
 * instantiation.
 * 
 * @author radamian
 */
public class TwoDimensionalNGramAggregate 
		extends NGramAggregate
{
	/**
	 * A HashMap linking a two-dimensional n-gram's secondary string identifier with the normalized frequency 
	 * at which n-grams with that secondary string identifier occur among n-grams from this object's list of 
	 * n-grams that have a unique secondary identifier.
	 */
	private HashMap<String, Double> secondary_string_id_to_frequency_map;
	
	/**
	 * An array of two-dimensional n-grams having a unique secondary identifier among this object's list of 
	 * n-grams. The length of this array is the same of the length of frequencies_by_unique_secondary_id. The 
	 * n-gram at each index occurs among n-grams from this object's list of n-grams that have a unique 
	 * secondary identifier at the frequency found at the same index in frequencies_by_unique_secondary_id.
	 */
	private TwoDimensionalNGram[] n_grams_by_unique_secondary_id;
	
	/**
	 * A normalized histogram containing the frequencies at which each n-gram having a unique secondary 
	 * identifier occurs among n-grams from this object's list of n-grams that have a unique secondary 
	 * identifier. The length of this array is the same of the length of n_grams_by_unique_secondary_id.
	 */
	private double[] frequencies_by_unique_secondary_id;
	
	/**
	 * A HashMap linking a two-dimensional n-gram's joint string identifier with the normalized frequency at 
	 * which n-grams with that joint string identifier occur among n-grams from this object's list of n-grams 
	 * that have a unique joint identifier.
	 */
	private HashMap<String, Double> joint_string_id_to_frequency_map;
	
	/**
	 * An array of n-grams having a unique joint identifier among this object's list of n-grams. The length of 
	 * this array is the same of the length of frequencies_by_unique_joint_id. The n-gram at each index occurs 
	 * among n-grams from this object's list of n-grams that have a unique joint identifier at the frequency 
	 * found at the same index in frequencies_by_unique_joint_id.
	 */
	private TwoDimensionalNGram[] n_grams_by_unique_joint_id;
	
	/**
	 * A normalized histogram containing the frequencies at which each n-gram having a unique joint 
	 * identifier occurs among n-grams from this object's list of n-grams that have a unique joint 
	 * identifier. The length of this array is the same as the length of n_grams_by_unique_joint_id.
	 */
	private double[] frequencies_by_unique_joint_id;
	
	
	/* CONSTRUCTOR ******************************************************************************************/

	
	/**
	 * Create an aggregate of the given list of n-grams.
	 * 
	 * @param	n_gram_list		The list of n-grams that this object aggregates.
	 */
	public TwoDimensionalNGramAggregate(LinkedList<NGram> n_gram_list)
	{
		super(n_gram_list, 0.0);
		
		secondary_string_id_to_frequency_map = new HashMap<>();
		joint_string_id_to_frequency_map = new HashMap<>();
		
		LinkedList<TwoDimensionalNGram> n_grams_by_unique_secondary_id_ll = new LinkedList<>();
		LinkedList<TwoDimensionalNGram> n_grams_by_unique_joint_id_ll = new LinkedList<>();
		
		// Iterate through the given n-grams and add pairs of unique n-grams and their frequency count to the
		// string_id_to_frequency_map field
		for (NGram n_gram: n_gram_list)
		{
			String secondary_string_id = ((TwoDimensionalNGram) n_gram).getSecondaryStringIdentifier();
			String joint_string_id = ((TwoDimensionalNGram) n_gram).getJointStringIdentifier();
			
			if (secondary_string_id_to_frequency_map.get(secondary_string_id) == null)
			{
				secondary_string_id_to_frequency_map.put(secondary_string_id, 1.0);
				n_grams_by_unique_secondary_id_ll.add((TwoDimensionalNGram) n_gram);
			}
			else
			{
				double old_frequency = secondary_string_id_to_frequency_map.get(secondary_string_id);
				secondary_string_id_to_frequency_map.put(secondary_string_id, old_frequency + 1);
			}

			if (joint_string_id_to_frequency_map.get(joint_string_id) == null)
			{
				joint_string_id_to_frequency_map.put(joint_string_id, 1.0);
				n_grams_by_unique_joint_id_ll.add((TwoDimensionalNGram) n_gram);
			}
			else
			{
				double old_frequency = joint_string_id_to_frequency_map.get(joint_string_id);
				joint_string_id_to_frequency_map.put(joint_string_id, old_frequency + 1);
			}
		}
		
		// The purpose of this code is to filter out n-grams that occur at a rate less than a specified 
		// percentage theshold. Currently, jSymbolic includes all n-grams in its feature calculations, no 
		// matter how rare.
		/*
		double filtering_threshold = .01;
		
		// Iterate through the list of n-grams, filtering out those that account for less than 1% of all
		// n-grams
		for (NGram n_gram: n_grams)
		{
			String string_id = n_gram.getStringIdentifier();
			
			if (secondary_string_id_to_frequency_map.get(string_id) != null)
			{
				// If the n-gram with a unique secondary identifier accounts for less than the filtering 
				// threshold percentage value of all n-grams by unique secondary identifiers, then its 
				// secondary string identifier is removed from the secondary_string_id_to_frequency_map field, 
				// and the n-gram is removed from the n_grams_by_unique_secondary_id_ll field.
				if (string_id_to_frequency_map.get(string_id) < n_grams.size() * filtering_threshold)
				{
					System.out.println("N-gram " + n_gram.getStringIdentifier() + " with frequency " + (secondary_string_id_to_frequency_map.get(string_id) / n_grams.size()) + " removed");
					secondary_string_id_to_frequency_map.remove(string_id);
					n_grams_by_unique_secondary_id_ll.remove(n_gram);
				}
			}
		
			if (joint_string_id_to_frequency_map.get(string_id) != null)
			{
				// If the n-gram with a unique joint identifier accounts for less than the filtering threshold 
				// percentage value of all n-grams by unique joint identifiers, then its joint string 
				// identifier is removed from the joint_string_id_to_frequency_map field, and the n-gram 
				// is removed from the n_grams_by_unique_joint_id_ll field.
				if (string_id_to_frequency_map.get(string_id) < n_grams.size() * filtering_threshold)
				{
					System.out.println("N-gram " + n_gram.getStringIdentifier() + " with frequency " + (joint_string_id_to_frequency_map.get(string_id) / n_grams.size()) + " removed");
					joint_string_id_to_frequency_map.remove(string_id);
					n_grams_by_unique_joint_id_ll.remove(n_gram);
				}
			}
		}
		*/
		
		// Initialize the n_grams_by_unique_secondary_id field
		n_grams_by_unique_secondary_id = new TwoDimensionalNGram[n_grams_by_unique_secondary_id_ll.size()];
		for (int i = 0; i < n_grams_by_unique_secondary_id.length; i++)
			n_grams_by_unique_secondary_id[i] = n_grams_by_unique_secondary_id_ll.get(i);
		
		// Initialize the frequencies_by_unique_secondary_id field
		frequencies_by_unique_secondary_id = new double[n_grams_by_unique_secondary_id.length];
		for (int i = 0; i < frequencies_by_unique_secondary_id.length; i++)
			frequencies_by_unique_secondary_id[i] = secondary_string_id_to_frequency_map.get(n_grams_by_unique_secondary_id[i].getSecondaryStringIdentifier());
		
		// Normalize the frequencies_by_unique_secondary_id field
		frequencies_by_unique_secondary_id = mckay.utilities.staticlibraries.MathAndStatsMethods.normalize(frequencies_by_unique_secondary_id);
		
		// Update the values in the secondary_string_id_to_frequency_map field to the normalized frequencies
		for (int i = 0; i < n_grams_by_unique_secondary_id.length; i++)
		{
			String secondary_string_id = n_grams_by_unique_secondary_id[i].getSecondaryStringIdentifier();
			secondary_string_id_to_frequency_map.remove(secondary_string_id);
			secondary_string_id_to_frequency_map.put(secondary_string_id, frequencies_by_unique_secondary_id[i]);
		}
		
		// Initialize the n_grams_by_unique_joint_id field
		n_grams_by_unique_joint_id = new TwoDimensionalNGram[n_grams_by_unique_joint_id_ll.size()];
		for (int i = 0; i < n_grams_by_unique_joint_id.length; i++)
			n_grams_by_unique_joint_id[i] = n_grams_by_unique_joint_id_ll.get(i);
		
		// Initialize the frequencies_by_unique_joint_id field
		frequencies_by_unique_joint_id = new double[n_grams_by_unique_joint_id.length];
		for (int i = 0; i < frequencies_by_unique_joint_id.length; i++)
			frequencies_by_unique_joint_id[i] = joint_string_id_to_frequency_map.get(n_grams_by_unique_joint_id[i].getJointStringIdentifier());
		
		// Normalize the frequencies_by_unique_joint_id field
		frequencies_by_unique_joint_id = mckay.utilities.staticlibraries.MathAndStatsMethods.normalize(frequencies_by_unique_joint_id);
		
		// Update the values in the joint_string_id_to_frequency_map field to the normalized frequencies
		for (int i = 0; i < n_grams_by_unique_joint_id.length; i++)
		{
			String joint_string_id = n_grams_by_unique_joint_id[i].getJointStringIdentifier();
			joint_string_id_to_frequency_map.remove(joint_string_id);
			joint_string_id_to_frequency_map.put(joint_string_id, frequencies_by_unique_joint_id[i]);
		}
	}

	
	/* PUBLIC METHODS ***************************************************************************************/
	
	
	/**
	 * Returns the normalized frequency at which the n-gram having the given secondary identifier occurs among
	 * n-grams having a unique secondary identifier.
	 * 
	 * @param	secondary_id	The secondary identifier of the n-gram.
	 * @return					The frequency of the n-gram with the given secondary identifier.
	 */
	public double getFrequencyOfSecondaryIdentifier(LinkedList<double[]> secondary_id)
	{
		double frequency;
		String s = NGram.identifierToString(secondary_id);
		
		if (secondary_string_id_to_frequency_map.get(s) != null)
			frequency = secondary_string_id_to_frequency_map.get(s);
		else
			frequency = 0.0;
		
		return frequency;
	}
	
	
	/**
	 * Return the most common secondary identifier in this object's list of n-grams having a unique secondary 
	 * identifier. Note that the returned value may not be the secondary identifier of the n-gram having a 
	 * unique primary identifier that occurs the most frequently, nor that of the n-gram having a unique joint 
	 * identifier that occurs the most frequently.
	 * 
	 * @return	The secondary identifier of the n-gram that occurs the most frequently.
	 */
	public LinkedList<double[]> getMostCommonSecondaryIdentifier()
	{
		int index_of_highest_frequency = mckay.utilities.staticlibraries.MathAndStatsMethods.getIndexOfLargest(frequencies_by_unique_secondary_id);
		LinkedList<double[]> most_common_secondary_identifier = n_grams_by_unique_secondary_id[index_of_highest_frequency].getSecondaryIdentifier();
		
		return most_common_secondary_identifier;
	}
	
	
	/**
	 * Returns the normalized frequency at which the n-gram having the given primary and secondary identifiers 
	 * (together composing a joint identifier) occurs among n-grams having unique joint identifiers.
	 * 
	 * @param	primary_id		The primary identifier of the n-gram.
	 * @param	secondary_id	The secondary identifier of the n-gram.
	 * @return					The frequency of the n-gram with the given joint identifier.
	 */
	public double getFrequencyOfJointIdentifier(LinkedList<double[]> primary_id,
												LinkedList<double[]>  secondary_id)
	{
		double frequency;
		String s = TwoDimensionalNGram.jointIdentifierToString(primary_id, secondary_id);
		
		if (joint_string_id_to_frequency_map.get(s) != null)
			frequency = joint_string_id_to_frequency_map.get(s);
		else
			frequency = 0.0;
		
		return frequency;
	}
}
