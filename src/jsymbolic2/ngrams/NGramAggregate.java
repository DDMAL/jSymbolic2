package jsymbolic2.ngrams;

import java.util.HashMap;
import java.util.LinkedList;

/**
 * This object aggregates n-grams generated by the NGramGenerator object and returns useful information for 
 * use by feature calculators. Each instance of this object is instantiated with a list of n-grams which all
 * have the same n-value and whose identifiers contain values for the same kind of moment (vertical interval, 
 * melodic interval, rhythmic value, etc.). 
 * 
 * Objects of this class store a hash map mapping the unique string identifier of an n-gram to the normalized 
 * frequency at which n-grams with that identifier occur. It also creates two arrays: one containing each 
 * n-gram that has a unique identifier, and the other containing the normalized frequency at which the n-gram 
 * at the same index of the first array occurs.
 * 
 * @author radamian
 */
public class NGramAggregate 
{
	/**
	 * The list of n-grams aggregated by this object. Each n-gram has the same n-value and its identifier
	 * contains values for the same kind of moment (vertical interval, melodic interval, rhythmic value, 
	 * etc.).
	 */
	protected LinkedList<NGram> n_grams;
	
	/**
	 * A HashMap mapping the string identifier of an n-gram with its normalized frequency.
	 */
	protected HashMap<String, Double> string_id_to_frequency_map;
	
	/**
	 * An array of n-grams having a unique identifier among this object's list of n-grams. The length of this 
	 * array is the same of the length of frequencies_by_unique_id. The n-gram at each index occurs in this 
	 * object's list of n-grams at the frequency found at the same index in frequencies_by_unique_id.
	 */
	protected NGram[] n_grams_by_unique_id;
	
	/**
	 * A normalized histogram containing the frequencies at which each n-gram having a unique identifier 
	 * occurs in this object's list of n-grams. The length of this array is the same of the length of 
	 * n_grams_by_unique_id.
	 */
	protected double[] frequencies_by_unique_id;
	
	
	/* CONSTRUCTOR ******************************************************************************************/
	
	
	/**
	 * Create an aggregate of the given list of n-grams.
	 * 
	 * @param	n_gram_list		The list of n-grams that this object aggregates.
	 */
	public NGramAggregate(LinkedList<NGram> n_gram_list)
	{
		n_grams = n_gram_list;
		string_id_to_frequency_map = new HashMap<>();
		
		LinkedList<NGram> unique_n_grams_ll = new LinkedList<>();
		
		// Iterate through the given list of n-grams, creating a set of n-grams having unique identifiers
		for (NGram n_gram: n_grams)
		{
			String string_id = n_gram.getStringIdentifier();
			
			if (string_id_to_frequency_map.get(string_id) == null)
			{
				string_id_to_frequency_map.put(string_id, 1.0);
				unique_n_grams_ll.add(n_gram);
			}
			else
			{
				double old_frequency = string_id_to_frequency_map.get(string_id);
				string_id_to_frequency_map.put(string_id, old_frequency + 1);
			}
		}
		
		n_grams_by_unique_id = new NGram[unique_n_grams_ll.size()];
		for (int n_gram = 0; n_gram < n_grams_by_unique_id.length; n_gram++)
			n_grams_by_unique_id[n_gram] = unique_n_grams_ll.get(n_gram);
		
		// Prepare array for normalization
		frequencies_by_unique_id = new double[n_grams_by_unique_id.length];
		for (int i = 0; i < frequencies_by_unique_id.length; i++)
			frequencies_by_unique_id[i] = string_id_to_frequency_map.get(n_grams_by_unique_id[i].getStringIdentifier());
		
		double[] frequencies_normalized = mckay.utilities.staticlibraries.MathAndStatsMethods.normalize(frequencies_by_unique_id);
		
		// Update the values returned by n_gram_by_unique_id_to_frequency_map to the normalized frequencies
		for (int i = 0; i < n_grams_by_unique_id.length; i++)
			string_id_to_frequency_map.replace(n_grams_by_unique_id[i].getStringIdentifier(), frequencies_normalized[i]);
		
		/*
		System.out.println("\n\nN-grams and their frequencies: ");
		for (int i = 0; i < identifiers.length; i++)
		{
			System.out.println("\n" + identifiers[i].nGramToString());
			System.out.println(frequencies[i]);
		}
		
		double[][] most_common_id = getMostCommonIdentifier();
		System.out.println("\n\n Most Common ID: ");
		for (int i = 0; i < most_common_id.length; i++)
			for (int voice = 0; voice < most_common_id[i].length; voice++)
				System.out.print(most_common_id[i][voice] + " ");
		*/
	}
	
	
	/* PUBLIC METHODS ***************************************************************************************/
		
	
	/**
	 * @return	The map between this object's n-gram's identifiers and their normalized frequencies.
	 */
	public HashMap<String, Double> getNGramByUniqueIdToFrequencyMap()
	{
		return string_id_to_frequency_map;
	}

	
	/**
	 * @return	The array of normalized frequencies corresponding to each unique n-gram identifier.
	 */
	public double[] getFrequenciesByUniqueId()
	{
		return frequencies_by_unique_id;
	}
	
	
	/**
	 * Returns a boolean indicating whether two given identifiers are the same.
	 * 
	 * @param	id1			The first identifier.
	 * @param	id2			The second identifier.
	 * @return				Whether the two identifiers are the same.
	 */
	public boolean equivalentIdentifiers(	LinkedList<double[]> id1, 
											LinkedList<double[]> id2)
	{
		boolean equivalent_id = true;
		
		for (int i = 0; i < id2.size(); i++)
		{
			if (id1.get(i).length != id2.get(i).length)
			{
				equivalent_id = false;
				break;
			}

			for (int j = 0; j < id2.get(i).length; j++)
				if (id1.get(i)[j] != id2.get(i)[j])
					equivalent_id = false;
		}
		
		return equivalent_id;
	}
	
	
	/**
	 * Returns the normalized frequency of the n-gram having the given unique identifier. If there is no
	 * n-gram with the given identifier, then a value of -1.0 is returned.
	 * 
	 * @param	id			The identifier of the n-gram.
	 * @return				The frequency of the n-gram with the given identifier.
	 */
	public double getFrequencyOfIdentifier(LinkedList<double[]> id)
	{
		String string_id = NGram.identifierToString(id);
		
		return string_id_to_frequency_map.get(string_id);
	}
	
	
	/**
	 * Return the most common identifier in this object's list of n-grams.
	 * 
	 * @return	The identifier of the n-gram that occurs the most frequently.
	 */
	public LinkedList<double[]> getMostCommonIdentifier()
	{
		int index_of_highest_frequency = mckay.utilities.staticlibraries.MathAndStatsMethods.getIndexOfLargest(frequencies_by_unique_id);
		LinkedList<double[]> most_common_identifier = n_grams_by_unique_id[index_of_highest_frequency].getIdentifier();
		
		return most_common_identifier;
	}
	
	
	/**
	 * Return the second most common identifier in this object's list of n-grams.
	 * 
	 * @return	The identifier of the n-gram that occurs the second most frequently.
	 */
	public LinkedList<double[]> getSecondMostCommonIdentifier()
	{
		int index_of_second_highest_frequency = mckay.utilities.staticlibraries.MathAndStatsMethods.getIndexOfSecondLargest(frequencies_by_unique_id);
		LinkedList<double[]> second_most_common_identifier = n_grams_by_unique_id[index_of_second_highest_frequency].getIdentifier();
		
		return second_most_common_identifier;
	}
}
