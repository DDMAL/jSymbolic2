package jsymbolic2.ngrams;

import java.util.HashMap;
import java.util.LinkedList;

/**
 * This object aggregates n-grams generated by the NGramGenerator object and returns useful information for 
 * use by feature calculators. Each instance of this object is associated with a single list of n-grams of a 
 * specific type.
 * 
 * @author radamian
 */
public class NGramAggregate 
{
	/**
	 * A list of n-grams. These may be n-grams for melodic intervals, rhythmic values, or vertical intervals.
	 */
	private final LinkedList<NGram> n_grams;
	
	/**
	 * A HashMap linking a unique n-gram identifier with its normalized frequency 
	 */
	private final HashMap<double[][], Double> identifierToFrequencyMap;
	
	/**
	 * An array of NGram objects, with an entry for each n-gram with a unique identifier. 
	 */
	private final NGram[] unique_n_grams;
	
	/**
	 * A normalized histogram containing the frequencies of each unique n-gram. Each entry is the normalized
	 * frequency of the n-gram at the same index of the identifiers field.
	 */
	private final double[] frequencies;
	
	
	/* CONSTRUCTOR ******************************************************************************************/
	
	
	/**
	 * This object's constructor.
	 * 
	 * @param	n_gram_list		The list of n-grams that this object aggregates.
	 */
	public NGramAggregate(LinkedList<NGram> n_gram_list)
	{
		n_grams = n_gram_list;
		
		identifierToFrequencyMap = new HashMap<>();
		
		LinkedList<NGram> unique_n_grams_ll = new LinkedList<>();
		for (NGram n_gram: n_grams)
		{
			double[][] id = n_gram.getIdentifier();
			boolean equivalent_id_found = false;
			
			for (double[][] other_id: identifierToFrequencyMap.keySet())
			{
				equivalent_id_found = true;
				for (int i = 0; i < other_id.length; i++)
					for (int j = 0; j < other_id[i].length; j++)
						if (id[i][j] != other_id[i][j])
							equivalent_id_found = false;
				
				if (equivalent_id_found)
				{
					double frequency = identifierToFrequencyMap.get(other_id);
					identifierToFrequencyMap.remove(other_id);
					identifierToFrequencyMap.put(other_id, frequency + 1);
					break;
				}
			}
			
			if (!equivalent_id_found) 
			{
				identifierToFrequencyMap.put(id, 1.0);
				unique_n_grams_ll.add(n_gram);
			}
		}
		
		unique_n_grams = new NGram[unique_n_grams_ll.size()];
		for (int n_gram = 0; n_gram < unique_n_grams.length; n_gram++)
			unique_n_grams[n_gram] = unique_n_grams_ll.get(n_gram);
		
		double[] frequencies_to_normalize = new double[unique_n_grams.length];
		for (int i = 0; i < frequencies_to_normalize.length; i++)
			frequencies_to_normalize[i] = identifierToFrequencyMap.get(unique_n_grams[i].getIdentifier());
		
		frequencies = mckay.utilities.staticlibraries.MathAndStatsMethods.normalize(frequencies_to_normalize);
		
		for (int n_gram = 0; n_gram < unique_n_grams.length; n_gram++)
		{
			double[][] id = unique_n_grams[n_gram].getIdentifier();
			identifierToFrequencyMap.remove(id);
			identifierToFrequencyMap.put(id, frequencies[n_gram]);
		}
		
//		System.out.println("\n\nN-grams and their frequencies: ");
//		for (int i = 0; i < identifiers.length; i++)
//		{
//			System.out.println("\n" + identifiers[i].nGramToString());
//			System.out.println(frequencies[i]);
//		}
		
//		double[][] most_common_id = getMostCommonIdentifier();
//		System.out.println("\n\n Most Common ID: ");
//		for (int i = 0; i < most_common_id.length; i++)
//			for (int voice = 0; voice < most_common_id[i].length; voice++)
//				System.out.print(most_common_id[i][voice] + " ");
	}
	
	
	/* PUBLIC METHODS ***************************************************************************************/
	
	
	/**
	 * @return	The map between this object's n-gram's identifiers and their normalized frequencies.
	 */
	public HashMap<double[][], Double> getIdentifierToFrequencyMap()
	{
		return identifierToFrequencyMap;
	}

	
	/**
	 * @return	The array of normalized frequencies corresponding to each unique n-gram identifier.
	 */
	public double[] getFrequencies()
	{
		return frequencies;
	}
	
	
	/**
	 * Return the most common identifier in this object's list of n-grams.
	 * 
	 * @return	The identifier of the n-gram that occurs the most frequently.
	 */
	public double[][] getMostCommonIdentifier()
	{
		int index_of_highest_frequency = mckay.utilities.staticlibraries.MathAndStatsMethods.getIndexOfLargest(frequencies);
		double[][] most_common_identifier = unique_n_grams[index_of_highest_frequency].getIdentifier();
		
		return most_common_identifier;
	}
	
	
	/**
	 * Return the second most common identifier in this object's list of n-grams.
	 * 
	 * @return	The identifier of the n-gram that occurs the second most frequently.
	 */
	public double[][] getSecondMostCommonIdentifier()
	{
		int index_of_second_highest_frequency = mckay.utilities.staticlibraries.MathAndStatsMethods.getIndexOfSecondLargest(frequencies);
		double[][] most_common_identifier = unique_n_grams[index_of_second_highest_frequency].getIdentifier();
		
		return most_common_identifier;
	}
}
