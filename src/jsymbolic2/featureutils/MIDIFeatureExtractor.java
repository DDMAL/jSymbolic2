package jsymbolic2.featureutils;

import javax.sound.midi.Sequence;
import ace.datatypes.FeatureDefinition;
import jsymbolic2.processing.MIDIIntermediateRepresentations;

/**
 * The prototype class for features designed to extract features from MIDI data. Each class that extends this
 * class will extract a particular feature from some sequence of MIDI data. Such classes do not store feature
 * values, only extract them. Classes that extend this class should have a constructor that sets the 
 * protected fields of this class.
 *
 * @author Cory McKay
 */
public abstract class MIDIFeatureExtractor
{
	/* FIELDS ***********************************************************************************************/
	
	
	/**
	 * Metadata about a feature that extends this class. Includes the feature's unique name; the feature's
	 * identifying code; a description of what information the feature represents and how it is calculated;
	 * whether the feature can be extracted from sequential windows of data; its dimensions (the number of
	 * values an extracted feature will consist of); and the name and version of the software used to extract
	 * the feature. Note that a value of 0 in the returned dimensions of the FeatureDefinition implies that
	 * the feature dimensions are variable, and depend on the analyzed data. Note also that the code should be
	 * one or more letters identifying the feature group the feature belongs to, followed by a hyphen,
	 * followed by the number of the feature within that group. For example, a value of I-7 would be
	 * appropriate for the seventh feature of the Instrumentation feature group.
	 */
	protected FeatureDefinition definition;

	/**
	 * The names of other features that are needed in order for a feature to be calculated. Will be null if
	 * a feature does not depend on any other features.
	 */
	protected String[] dependencies;

	/**
	 * The offset in windows of each of the features named in the dependencies field. An offset of -1, for
	 * example, means that the feature in dependencies with the same index value should be provided to this
	 * class' extractFeature method with a value that corresponds to the window prior to the window
	 * corresponding to this feature. Will be null if there are no dependencies. This must be null, 0 or a 
	 * negative number. Positive numbers are not allowed.
	 */
	protected int[] offsets;

	/**
	 * Whether or not the feature should be considered a default feature (i.e. one that should be extracted
	 * unless otherwise specified).
	 */
	protected boolean is_default;
	
	/**
	 * Whether or not the feature should be considered s secure feature. Secure features are defined here as
	 * features whose values are less likely to be influenced by data that is carelessly or inconsistently
	 * encoded. For example, a feature that checks if a piano is present in a piece would be unsecure if it is
	 * likely that the symbolic music files being processed were generated by an encoder who did not bother to
	 * specify instruments present, and just left all patches at their piano default, regardless of whether a
	 * piano was actually present. All implemented features are secure in the sense that they are fully tested
	 * and properly measure what they are intended to measure in properly encoded music, of course, but
	 * features marked here as unsecure should only be used if the user is only using data that has been
	 * responsibly encoded.
	 */
	protected boolean is_secure;
	
	
	/* PUBLIC METHODS ***************************************************************************************/
	
	
	/**
	 * Returns meta-data about a feature that extends this class. Includes the feature's unique name; a
	 * description of what information the feature represents and how it is calculated; whether the feature
	 * can be extracted from sequential windows of data; and its dimensions (the number of values an extracted
	 * feature will consist of). Note that a value of 0 in the returned dimensions of the FeatureDefinition
	 * implies that the feature dimensions are variable, and depend on the analyzed data.
	 *
	 * @return The definition of this particular feature.
	 */
	public FeatureDefinition getFeatureDefinition()
	{
		return definition;
	}

	
	/**
	 * Returns the names of other features that are needed in order to extract this feature. Will return null
	 * if no other features are needed.
	 *
	 * @return The dependencies of this particular feature.
	 */
	public String[] getDepenedencies()
	{
		return dependencies;
	}

	
	/**
	 * Returns the offsets of other features that are needed in order to extract this feature. Will return
	 * null if no other features are needed.
	 *
	 * <p>The offset is in windows, and the indice of the retuned array corresponds to the indice of the array
	 * returned by the getDependencies method. An offset of -1, for example, means that the feature returned
	 * by getDependencies with the same indice should be provided to this class's extractFeature method with a
	 * value that corresponds to the window prior to the window corresponding to this feature.</p>
	 *
	 * @return The dependency offsets of this particular feature.
	 */
	public int[] getDepenedencyOffsets()
	{
		return offsets;
	}

	
	/**
	 * Returns whether or not the feature should be considered a default feature (i.e. one that should be
	 * extracted unless otherwise specified).
	 * 
	 * @return Whether or not this is a default feature.
	 */
	public boolean getIsDefault()
	{
		return is_default;
	}
				
	
	/**
	 * Returns whether or not the feature should be considered s secure feature. Secure features are defined
	 * here as features whose values are less likely to be influenced by data that is carelessly or
	 * inconsistently encoded. For example, a feature that checks if a piano is present in a piece would be
	 * insecure if it is likely that the symbolic music files being processed were generated by an encoder who
	 * did not bother to specify instruments present, and just left all patches at their piano default,
	 * regardless of whether a piano was actually present. All implemented features are secure in the sense
	 * that they are fully tested and properly measure what they are intended to measure in properly encoded
	 * music, of course, but features marked here as insecure should only be used if the user is only using
	 * data that has been responsibly encoded.
	 * 
	 * @return Whether or not this is a secure feature.
	 */
	public boolean getIsSecure()
	{
		return is_secure;
	}
	
	
	/**
	 * The prototype method that classes extending this class will override in order to extract their
	 * feature from a sequence of MIDI data.
	 *
	 * @param sequence				The MIDI data to extract the feature from.
	 * @param sequence_info			Additional data already extracted from the the MIDI sequence.
	 * @param other_feature_values	The values of other features that may be needed to calculate this feature. 
	 *								The order and offsets of these features must be the same as those returned
	 *								by this class' getDependencies and getDependencyOffsets methods, 
	 *								respectively. The first indice indicates the feature/window, and the 
	 *								second indicates the value.
	 * @return						The extracted feature value(s).
	 * @throws Exception			Throws an informative exception if the feature cannot be calculated.
	 */
	public abstract double[] extractFeature( Sequence sequence,
											 MIDIIntermediateRepresentations sequence_info,
										     double[][] other_feature_values )
	throws Exception;
}